package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"

	_ "github.com/lib/pq"
)

type AutoGenerated struct {
	TotSellamnt    int64  `json:"totSellamnt"`
	ReturnValue    string `json:"returnValue"`
	DrwNoDate      string `json:"drwNoDate"`
	FirstWinamnt   int64  `json:"firstWinamnt"`
	DrwtNo6        int    `json:"drwtNo6"`
	DrwtNo4        int    `json:"drwtNo4"`
	FirstPrzwnerCo int    `json:"firstPrzwnerCo"`
	DrwtNo5        int    `json:"drwtNo5"`
	BnusNo         int    `json:"bnusNo"`
	FirstAccumamnt int    `json:"firstAccumamnt"`
	DrwNo          int    `json:"drwNo"`
	DrwtNo2        int    `json:"drwtNo2"`
	DrwtNo3        int    `json:"drwtNo3"`
	DrwtNo1        int    `json:"drwtNo1"`
}

func main() {

	// sql.DB 객체 생성
	db, err := sql.Open("postgres", `host= kyeongmin.iptime.org port=5432 user=postgres password=rud123 dbname=postgres sslmode=disable`)

	// db가 전부 사용한 다음 맨 마지막에 닫도록 해주는 명령
	defer db.Close()

	//db.ping() 만약 db연결이 실패할 경우 왜 실패한건지 에러찍는 용도
	if err != nil || db.Ping() != nil {
		panic(err.Error())
	}
	// var distance string
	// var name string
	// rows, err := db.Query("SELECT name, minute FROM exercise ")
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// defer rows.Close() //반드시 닫는다 (지연하여 닫기)

	// for rows.Next() {
	// 	err := rows.Scan(&distance, &name)
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}

	// 	fmt.Println(distance, name)
	// }

	// GET 호출
	number := 0
	for i := 1009; ; i++ {
		stringI := strconv.Itoa(i)
		resp, err := http.Get("https://www.dhlottery.co.kr/common.do?method=getLottoNumber&drwNo=" + stringI)
		if err != nil {
			panic(err)
		}

		defer resp.Body.Close()

		// 결과 출력
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			panic(err)
		}
		fmt.Printf("%s\n", string(data))
		testStruct := &AutoGenerated{}
		json.Unmarshal(data, testStruct)
		fmt.Println(testStruct.ReturnValue)
		if testStruct.ReturnValue == "fail" {
			fmt.Println(testStruct.ReturnValue)
			number = i - 1
			fmt.Println(number)
			break
		}
	}
	for i := number; ; i++ {
		stringI := strconv.Itoa(i)
		resp, err := http.Get("https://www.dhlottery.co.kr/common.do?method=getLottoNumber&drwNo=" + stringI)
		if err != nil {
			panic(err)
		}

		defer resp.Body.Close()

		// 결과 출력
		data, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			panic(err)
		}
		fmt.Printf("%s\n", string(data))
		testStruct := &AutoGenerated{}
		json.Unmarshal(data, testStruct)
		fmt.Println(testStruct.ReturnValue)
		if testStruct.ReturnValue == "fail" {
			fmt.Println(testStruct.ReturnValue)
			break
		}
		//INSERT 문 실행

		result, err := db.Exec("INSERT INTO lotto VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)", testStruct.DrwNoDate, testStruct.DrwNo, testStruct.FirstPrzwnerCo, testStruct.FirstWinamnt, testStruct.DrwtNo1, testStruct.DrwtNo2, testStruct.DrwtNo3, testStruct.DrwtNo4, testStruct.DrwtNo5, testStruct.DrwtNo6, testStruct.BnusNo)
		if err != nil {
			log.Fatal(err)
		}

		// sql.Result.RowsAffected() 체크
		n, err := result.RowsAffected()
		if n == 1 {
			fmt.Println("1 row inserted.")
		}
	}
}
